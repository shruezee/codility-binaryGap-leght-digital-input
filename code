import Foundation
import Glibc


public func solution(_ N : Int) -> Int {
let strBinary = String(N, radix: 2)
var result:Int = 0
    
let intBinaryGaps = strBinary.indexes(of: "1")
let temp = intBinaryGaps.map { ($0).encodedOffset}
    for (i,_) in temp.enumerated() {
        if i > 0, result < temp[i] - temp[i-1] {
        result = temp[i] - temp[i-1]
        }
    }
    return result > 0 ? result - 1 : result
}

extension StringProtocol where Index == String.Index {
    func index(of string: Self, options: String.CompareOptions = []) -> Index? {
        return range(of: string, options: options)?.lowerBound
    }
    func endIndex(of string: Self, options: String.CompareOptions = []) -> Index? {
        return range(of: string, options: options)?.upperBound
    }
    func indexes(of string: Self, options: String.CompareOptions = []) -> [Index] {
        var result: [Index] = []
        var startIndex = self.startIndex
        while startIndex < endIndex,
            let range = self[startIndex...].range(of: string, options: options) {
                result.append(range.lowerBound)
                startIndex = range.lowerBound < range.upperBound ? range.upperBound :
                    index(range.lowerBound, offsetBy: 1, limitedBy: endIndex) ?? endIndex
        }
        return result
    }

}
